import { app, BrowserWindow, dialog, ipcMain, Menu } from 'electron';
import fs from "fs"
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 1200,
    width: 600,
    // backgroundMaterial: "acrylic",
    alwaysOnTop: true,
    title: "Curb",
    icon: "../assets/icon.ico",
    // frame: false,
    autoHideMenuBar: true,
    backgroundColor: "#000",
    // transparent: true,
    opacity: 0.9,
    x: 0,
    y:0,
    webPreferences: {
      contextIsolation: true,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
    titleBarStyle: 'hidden',
    titleBarOverlay: {
      color: '#000',
      symbolColor: '#005909'
    }
  });

  mainWindow.setMenu( Menu.buildFromTemplate([]))


  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  // mainWindow.webContents.openDevTools();

  ipcMain.on("import", (event) => {
    dialog.showOpenDialog(mainWindow, {
      properties: ['openFile']
    }).then(result => {
      if(result.canceled){
        return;
      }
      const data = fs.readFileSync(result.filePaths[0], {
        encoding: "utf-8"
      })
      if(data){
        event.reply("import-reply", data)
      }
    }).catch(err => {
      console.log(err)
    })
  })
  ipcMain.on("export", async (e, data) => {
    dialog.showSaveDialog(mainWindow, {
      properties: []
    }).then(result => {
      if(result.canceled){
        return;
      }
      fs.writeFileSync(result.filePath, data);
    }).catch(err => {
      console.log(err)
    })
  })
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});



// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
